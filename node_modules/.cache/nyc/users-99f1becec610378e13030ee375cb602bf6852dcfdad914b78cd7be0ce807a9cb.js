'use strict';function cov_2qqlxcft8t(){var path="/var/www/html/l314-s1/models/users.js";var hash="d0e7b32796c70ac4dbe3b82c63a84505133c3613";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/var/www/html/l314-s1/models/users.js",statementMap:{"0":{start:{line:4,column:4},end:{line:4,column:24}},"1":{start:{line:5,column:0},end:{line:29,column:2}},"2":{start:{line:16,column:2},end:{line:27,column:5}},"3":{start:{line:28,column:2},end:{line:28,column:15}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:5,column:17},end:{line:5,column:18}},loc:{start:{line:5,column:43},end:{line:29,column:1}},line:5},"1":{name:"(anonymous_1)",decl:{start:{line:12,column:4},end:{line:12,column:5}},loc:{start:{line:12,column:29},end:{line:14,column:5}},line:12}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0},f:{"0":0,"1":0},b:{},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"d0e7b32796c70ac4dbe3b82c63a84505133c3613"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_2qqlxcft8t=function(){return actualCoverage;};}return actualCoverage;}cov_2qqlxcft8t();const{Model}=(cov_2qqlxcft8t().s[0]++,require('sequelize'));cov_2qqlxcft8t().s[1]++;module.exports=(sequelize,DataTypes)=>{cov_2qqlxcft8t().f[0]++;class Users extends Model{/**
     * Helper method for defining associations.
     * This method is not a part of Sequelize lifecycle.
     * The `models/index` file will call this method automatically.
     */static associate(models){cov_2qqlxcft8t().f[1]++;}// define association here
}cov_2qqlxcft8t().s[2]++;Users.init({id:{type:DataTypes.INTEGER,primaryKey:true,autoIncrement:true},firstname:DataTypes.STRING,lastname:DataTypes.STRING},{sequelize,modelName:'Users'});cov_2qqlxcft8t().s[3]++;return Users;};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMnFxbHhjZnQ4dCIsInBhdGgiLCJoYXNoIiwiZ2xvYmFsIiwiRnVuY3Rpb24iLCJnY3YiLCJjb3ZlcmFnZURhdGEiLCJzdGF0ZW1lbnRNYXAiLCJzdGFydCIsImxpbmUiLCJjb2x1bW4iLCJlbmQiLCJmbk1hcCIsIm5hbWUiLCJkZWNsIiwibG9jIiwiYnJhbmNoTWFwIiwicyIsImYiLCJiIiwiX2NvdmVyYWdlU2NoZW1hIiwiY292ZXJhZ2UiLCJhY3R1YWxDb3ZlcmFnZSIsIk1vZGVsIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJzZXF1ZWxpemUiLCJEYXRhVHlwZXMiLCJVc2VycyIsImFzc29jaWF0ZSIsIm1vZGVscyIsImluaXQiLCJpZCIsInR5cGUiLCJJTlRFR0VSIiwicHJpbWFyeUtleSIsImF1dG9JbmNyZW1lbnQiLCJmaXJzdG5hbWUiLCJTVFJJTkciLCJsYXN0bmFtZSIsIm1vZGVsTmFtZSJdLCJzb3VyY2VzIjpbInVzZXJzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbmNvbnN0IHtcbiAgTW9kZWxcbn0gPSByZXF1aXJlKCdzZXF1ZWxpemUnKTtcbm1vZHVsZS5leHBvcnRzID0gKHNlcXVlbGl6ZSwgRGF0YVR5cGVzKSA9PiB7XG4gIGNsYXNzIFVzZXJzIGV4dGVuZHMgTW9kZWwge1xuICAgIC8qKlxuICAgICAqIEhlbHBlciBtZXRob2QgZm9yIGRlZmluaW5nIGFzc29jaWF0aW9ucy5cbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBub3QgYSBwYXJ0IG9mIFNlcXVlbGl6ZSBsaWZlY3ljbGUuXG4gICAgICogVGhlIGBtb2RlbHMvaW5kZXhgIGZpbGUgd2lsbCBjYWxsIHRoaXMgbWV0aG9kIGF1dG9tYXRpY2FsbHkuXG4gICAgICovXG4gICAgc3RhdGljIGFzc29jaWF0ZShtb2RlbHMpIHtcbiAgICAgIC8vIGRlZmluZSBhc3NvY2lhdGlvbiBoZXJlXG4gICAgfVxuICB9XG4gIFVzZXJzLmluaXQoe1xuICAgIGlkOiB7XG4gICAgICB0eXBlOiBEYXRhVHlwZXMuSU5URUdFUixcbiAgICAgIHByaW1hcnlLZXk6IHRydWUsXG4gICAgICBhdXRvSW5jcmVtZW50OiB0cnVlLFxuICAgIH0sXG4gICAgZmlyc3RuYW1lOiBEYXRhVHlwZXMuU1RSSU5HLFxuICAgIGxhc3RuYW1lOiBEYXRhVHlwZXMuU1RSSU5HXG4gIH0sIHtcbiAgICBzZXF1ZWxpemUsXG4gICAgbW9kZWxOYW1lOiAnVXNlcnMnLFxuICB9KTtcbiAgcmV0dXJuIFVzZXJzO1xufTtcbiJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDLFNBQUFBLGVBQUEsTUFBQUMsSUFBQSw2Q0FBQUMsSUFBQSxnREFBQUMsTUFBQSxLQUFBQyxRQUFBLHNCQUFBQyxHQUFBLG9CQUFBQyxZQUFBLEVBQUFMLElBQUEseUNBQUFNLFlBQUEsT0FBQUMsS0FBQSxFQUFBQyxJQUFBLEdBQUFDLE1BQUEsSUFBQUMsR0FBQSxFQUFBRixJQUFBLEdBQUFDLE1BQUEsV0FBQUYsS0FBQSxFQUFBQyxJQUFBLEdBQUFDLE1BQUEsSUFBQUMsR0FBQSxFQUFBRixJQUFBLElBQUFDLE1BQUEsVUFBQUYsS0FBQSxFQUFBQyxJQUFBLElBQUFDLE1BQUEsSUFBQUMsR0FBQSxFQUFBRixJQUFBLElBQUFDLE1BQUEsVUFBQUYsS0FBQSxFQUFBQyxJQUFBLElBQUFDLE1BQUEsSUFBQUMsR0FBQSxFQUFBRixJQUFBLElBQUFDLE1BQUEsT0FBQUUsS0FBQSxPQUFBQyxJQUFBLGlCQUFBQyxJQUFBLEVBQUFOLEtBQUEsRUFBQUMsSUFBQSxHQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxHQUFBQyxNQUFBLE1BQUFLLEdBQUEsRUFBQVAsS0FBQSxFQUFBQyxJQUFBLEdBQUFDLE1BQUEsS0FBQUMsR0FBQSxFQUFBRixJQUFBLElBQUFDLE1BQUEsS0FBQUQsSUFBQSxTQUFBSSxJQUFBLGlCQUFBQyxJQUFBLEVBQUFOLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLEtBQUFLLEdBQUEsRUFBQVAsS0FBQSxFQUFBQyxJQUFBLElBQUFDLE1BQUEsS0FBQUMsR0FBQSxFQUFBRixJQUFBLElBQUFDLE1BQUEsS0FBQUQsSUFBQSxNQUFBTyxTQUFBLElBQUFDLENBQUEsMkJBQUFDLENBQUEsZUFBQUMsQ0FBQSxJQUFBQyxlQUFBLDRDQUFBbEIsSUFBQSxpREFBQW1CLFFBQUEsQ0FBQWxCLE1BQUEsQ0FBQUUsR0FBQSxJQUFBRixNQUFBLENBQUFFLEdBQUEsVUFBQWdCLFFBQUEsQ0FBQXBCLElBQUEsR0FBQW9CLFFBQUEsQ0FBQXBCLElBQUEsRUFBQUMsSUFBQSxHQUFBQSxJQUFBLEVBQUFtQixRQUFBLENBQUFwQixJQUFBLEVBQUFLLFlBQUEsTUFBQWdCLGNBQUEsQ0FBQUQsUUFBQSxDQUFBcEIsSUFBQSxHQWVEO0FBQUFELGNBQUEsU0FBQUEsQ0FBQSxTQUFBc0IsY0FBQSxXQUFBQSxjQUFBLEVBQUF0QixjQUFBLEdBZFosS0FBTSxDQUNKdUIsS0FDRixDQUFDLEVBQUF2QixjQUFBLEdBQUFpQixDQUFBLE1BQUdPLE9BQU8sQ0FBQyxXQUFXLENBQUMsRUFBQ3hCLGNBQUEsR0FBQWlCLENBQUEsTUFDekJRLE1BQU0sQ0FBQ0MsT0FBTyxDQUFHLENBQUNDLFNBQVMsQ0FBRUMsU0FBUyxHQUFLLENBQUE1QixjQUFBLEdBQUFrQixDQUFBLE1BQ3pDLEtBQU0sQ0FBQVcsS0FBSyxRQUFTLENBQUFOLEtBQU0sQ0FDeEI7QUFDSjtBQUNBO0FBQ0E7QUFDQSxPQUNJLE1BQU8sQ0FBQU8sU0FBU0EsQ0FBQ0MsTUFBTSxDQUFFLENBQUEvQixjQUFBLEdBQUFrQixDQUFBLE1BRXpCLENBREU7QUFFSixDQUFDbEIsY0FBQSxHQUFBaUIsQ0FBQSxNQUNEWSxLQUFLLENBQUNHLElBQUksQ0FBQyxDQUNUQyxFQUFFLENBQUUsQ0FDRkMsSUFBSSxDQUFFTixTQUFTLENBQUNPLE9BQU8sQ0FDdkJDLFVBQVUsQ0FBRSxJQUFJLENBQ2hCQyxhQUFhLENBQUUsSUFDakIsQ0FBQyxDQUNEQyxTQUFTLENBQUVWLFNBQVMsQ0FBQ1csTUFBTSxDQUMzQkMsUUFBUSxDQUFFWixTQUFTLENBQUNXLE1BQ3RCLENBQUMsQ0FBRSxDQUNEWixTQUFTLENBQ1RjLFNBQVMsQ0FBRSxPQUNiLENBQUMsQ0FBQyxDQUFDekMsY0FBQSxHQUFBaUIsQ0FBQSxNQUNILE1BQU8sQ0FBQVksS0FBSyxDQUNkLENBQUMifQ==